name: Spring_test

env:
  APPLICATION_DIR: repo

#при пуше в репозиторий
on: push
#блок определения раннеров(вм) 
jobs:
  #первый раннер
  Spring_job:
    #запускаем на последней убунте
    runs-on: ubuntu-latest   
    #определяем, что нужно выполнить раннеру
    steps:                    
      - name: make dir
        run: mkdir ${{ env.APPLICATION_DIR }}
           
      - name: Copy repo 
        #копируем репозиторий на раннер
        uses: actions/checkout@v2        
        with:
          path: ${{ env.APPLICATION_DIR }}
          
      - name: Create docker network
        #создаем сеть 10.10.0.0 с маской 24 с драйвером bridge        
        run: docker network create -d bridge --subnet=10.10.0.0/24 internal_net
                  
      - name: build app
        #создаем контейнер для билда приложения
        run: docker run --rm --name Build -v "$(pwd)/${{ env.APPLICATION_DIR }}":/usr/src/mymaven -w /usr/src/mymaven maven mvn clean package
                        
      - name: run app
        #создаем контейнер, в котором запускаем приложение
        run: docker run --name App -v "$(pwd)/${{ env.APPLICATION_DIR }}":/usr/src/mymaven -w /usr/src/mymaven -d -p 5050:8080 --net internal_net --ip 10.10.0.12 maven java -jar target/demo-0.0.1-SNAPSHOT.jar
       
      #- name: run application container
        #запускаем контейнер apptry
        #-d - запускаем в фоновом процессе, чтоб не висело
        #-p 5050:8080 - прокидываем порт, на котором работает приложение (8080) на порт контейнера (5050)
        #--net internal_net - указываем, в какой сети работает контейнер
        #--ip 10.10.0.12 - задаем ip
      #  run: docker run --name apptry  spring_boot
        
      - name: sleep
        run: sleep 1m
        
      - name: get1
        run: curl -L -v http://10.10.0.1:5050/?id=4
        
     # - name: get data from service
     #   run: docker run --rm --name curl --net internal_net --ip 10.10.0.15 curlimages/curl:latest -L -v http://10.10.0.1:5050/?id=4
                
     # - name: add data to service
     #   run: docker run --rm --name curl --net internal_net --ip 10.10.0.15 curlimages/curl:latest -X POST -L -v -F 'id=4' -F 'name=Aleks' http://10.10.0.1:5050
         
      #- name: get data from service
     #   run: docker run --rm --name curl --net internal_net --ip 10.10.0.15 curlimages/curl:latest -L -v http://10.10.0.1:5050/?id=4
